using Microsoft.Extensions.DependencyInjection;
using ZIFApi.Actions;

namespace ZIFApiTests;

[TestFixture]
public class SetupsFor821xVSWTests
{
    private ServiceProvider Services = null!;

    private IPortSetup821xVSW PortSetup = null!;

    [SetUp]
    public void Setup()
    {
        var services = new ServiceCollection();

        services.AddSingleton<IPortSetup821xVSW, PortSetup821xVSW>();

        Services = services.BuildServiceProvider();

        PortSetup = Services.GetRequiredService<IPortSetup821xVSW>();
    }

    [TearDown]
    public void TearDown()
    {
        Services?.Dispose();
    }

    private readonly Dictionary<PortKey, byte[]> ExpectedSetups = new() {
        { new( "1", "1PH"),     [ 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00 ] },
        { new( "2", "1PH 3W"),  [ 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00 ] },
        { new( "3", "1PH 3W"),  [ 0x00, 0x10, 0x00, 0x81, 0x08, 0x00, 0x00 ] },
        { new( "4", "1PH 3W"),  [ 0x00, 0x09, 0x10, 0x04, 0x00, 0x00, 0x00 ] },
        { new( "5", "3WN"),     [ 0x00, 0x00, 0x00, 0x08, 0x1e, 0x00, 0x00 ] },
        { new( "6", "4WY"),     [ 0x00, 0x00, 0x0a, 0x04, 0x01, 0x00, 0x00 ] },
        { new( "8", "4WD"),     [ 0x0c, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00 ] },
        { new( "9", "4WY"),     [ 0x0c, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00 ] },
        { new("10", "4WY"),     [ 0x0c, 0x04, 0x02, 0x04, 0x01, 0x00, 0x00 ] },
        { new("11", "4WD"),     [ 0x0c, 0x00, 0x02, 0x04, 0x08, 0x00, 0x00 ] },
        { new("12", "3WN"),     [ 0x00, 0x10, 0x00, 0x03, 0x28, 0x00, 0x00 ] },
        { new("13", "3WN"),     [ 0x00, 0x00, 0x00, 0x08, 0x1e, 0x00, 0x00 ] },
        { new("14", "4WY"),     [ 0x00, 0x00, 0x00, 0x02, 0x68, 0x00, 0x00 ] },
        { new("15", "4WD"),     [ 0x00, 0x00, 0x00, 0x02, 0x68, 0x00, 0x00 ] },
        { new("16", "4WY"),     [ 0x00, 0x00, 0x00, 0x02, 0x68, 0x00, 0x00 ] },
        { new("17", "4WD"),     [ 0x00, 0x00, 0x00, 0x02, 0x68, 0x00, 0x00 ] },
        { new("25", "3WN"),     [ 0x00, 0x10, 0x00, 0x03, 0x20, 0x00, 0x00 ] },
        { new("26", "3WN"),     [ 0x00, 0x00, 0x0a, 0x04, 0x01, 0x00, 0x00 ] },
        { new("29", "4WY"),     [ 0x04, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00 ] },
        { new("35", "1PH 3W"),  [ 0x00, 0x00, 0x00, 0x08, 0x1e, 0x00, 0x00 ] },
        { new("36", "4WY"),     [ 0x00, 0x00, 0x0a, 0x04, 0x00, 0x00, 0x00 ] },
        { new("39", "4WY"),     [ 0x0c, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00 ] },
        { new("45", "3WN"),     [ 0x00, 0x00, 0x00, 0x08, 0x1e, 0x00, 0x00 ] },
        { new("46", "4WY"),     [ 0x00, 0x00, 0x0a, 0x04, 0x01, 0x00, 0x00 ] },
        { new("56", "3WN"),     [ 0x00, 0x00, 0x0a, 0x04, 0x01, 0x00, 0x00 ] },
        { new("66", "3WN"),     [ 0x00, 0x00, 0x0a, 0x04, 0x01, 0x00, 0x00 ] },
        { new("76", "4WY"),     [ 0x00, 0x00, 0x0a, 0x04, 0x01, 0x00, 0x00 ] },
    };

    [Test]
    public async Task Can_Load_Setup_Async()
    {
        foreach (var expected in ExpectedSetups)
        {
            var setups = await PortSetup.PortSetups;

            Assert.That(setups[expected.Key], Is.EqualTo(expected.Value));
        }
    }
}